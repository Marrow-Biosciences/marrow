module(name = "marrow", version = "0.0.0")
bazel_dep(name = "bazelrc-preset.bzl", version = "1.5.0")
bazel_dep(name = "protobuf", version = "32.1")
bazel_dep(name = "rules_distroless", version = "0.6.1")
bazel_dep(name = "rules_foreign_cc", version = "0.15.1")
bazel_dep(name = "rules_multirun", version = "0.13.0")
bazel_dep(name = "rules_oci", version = "2.2.6")
single_version_override(module_name = "rules_oci", patches = ["//patches:rules_oci.patch"])
bazel_dep(name = "rules_rust", version = "0.66.0")
single_version_override(module_name = "rules_rust", patches = ["//patches:rules_rust.patch"])
bazel_dep(name = "tar.bzl", version = "0.6.0")
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
http_archive(
  name = "risingwave",
  urls = ["https://github.com/risingwavelabs/risingwave/archive/refs/tags/v2.6.1.tar.gz"],
  strip_prefix = "risingwave-2.6.1",
  integrity = "sha256-RxrAY/rFRzBwJyUuDsatU0IBIVywbzMjX5TOFJ0Iuwk=",
  build_file_content = """exports_files(glob(["proto/**/*.proto"]))""",
  patches = ["//patches:risingwave_proto_expr.patch"],
)
rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2024", versions = ["nightly/2025-11-01"])
use_repo(rust, "rust_toolchains")
register_toolchains("@rust_toolchains//:all")
rust_host_tools = use_extension("@rules_rust//rust:extensions.bzl", "rust_host_tools")
rust_host_tools.host_tools(name = "rust_host_tools_nightly", edition = "2024", version = "nightly")
use_repo(rust_host_tools, "rust_host_tools_nightly")
crate = use_extension("@rules_rust//crate_universe:extensions.bzl", "crate")
inject_repo(crate, "marrow", "protobuf", "risingwave", "rules_foreign_cc")
crate.from_cargo(name = "crates_risingwave", cargo_lockfile = "//risingwave:Cargo.lock", manifests = ["//risingwave:Cargo.toml"], host_tools = "@rust_host_tools_nightly")
crate.annotation(crate = "faiss-sys", repositories = ["crates_risingwave"], build_script_data = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"], build_script_env = {"CMAKE": "$${pwd}/$(CMAKE)"}, build_script_toolchains = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"])  # https://github.com/bazel-contrib/rules_foreign_cc/blob/0.15.1/examples/MODULE.bazel#L46-L57
crate.annotation(crate = "gcp-bigquery-client", repositories = ["crates_risingwave"], patches = ["//patches:gcp_bigquery_client.patch"])
crate.annotation(crate = "jsonschema-transpiler", repositories = ["crates_risingwave"], gen_build_script = "off")  # Build script is only for testing purpose
crate.annotation(crate = "lru", version = "0.7.6", repositories = ["crates_risingwave"], patches = ["//patches:lru.patch"])
crate.annotation(crate = "otlp-embedded", repositories = ["crates_risingwave"], build_script_tools = ["@protobuf//:protoc"], build_script_env = {"PROTOC": "$(execpath @protobuf//:protoc)"})
crate.annotation(crate = "pulsar", repositories = ["crates_risingwave"], build_script_tools = ["@protobuf//:protoc"], build_script_env = {"PROTOC": "$(execpath @protobuf//:protoc)"})
crate.annotation(crate = "rdkafka-sys", repositories = ["crates_risingwave"], build_script_data = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"], build_script_env = {"CMAKE": "$${pwd}/$(CMAKE)"}, build_script_toolchains = ["@rules_foreign_cc//toolchains:current_cmake_toolchain"])  # https://github.com/bazel-contrib/rules_foreign_cc/blob/0.15.1/examples/MODULE.bazel#L46-L57
crate.annotation(crate = "risingwave_cmd", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_cmd.patch"], deps = ["@marrow//risingwave/kernel"])
crate.annotation(crate = "risingwave_cmd_all", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_cmd_all.patch"], deps = ["@marrow//risingwave/kernel"], gen_all_binaries = True)  # Run standalone binary `bazel run @crates_risingwave//:risingwave_cmd_all__risingwave`
crate.annotation(crate = "risingwave_common", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_common.patch"])
crate.annotation(crate = "risingwave_connector", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_connector.patch"])
crate.annotation(crate = "risingwave_connector_codec", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_connector_codec.patch"], gen_build_script = "off")  # Build script is only for testing purpose
crate.annotation(crate = "risingwave_frontend", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_frontend.patch"])
crate.annotation(crate = "risingwave_meta", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_meta.patch"])
crate.annotation(crate = "risingwave_meta_model", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_meta_model.patch"])
crate.annotation(crate = "risingwave_object_store", repositories = ["crates_risingwave"], patches = ["//patches:risingwave_object_store.patch"])
crate.annotation(
  crate = "risingwave_pb",
  repositories = ["crates_risingwave"],
  build_script_deps = ["@marrow//risingwave:tonic_build_prod"],
  build_script_link_deps = ["@marrow//risingwave:tonic_build_prod"],
  build_script_tools = ["@protobuf//:protoc"],
  build_script_env = {
    "PROTOC": "$(execpath @protobuf//:protoc)",
    "PROTOF": "$(execpath @risingwave//:proto/backup_service.proto)",
  },
  build_script_data = [
    "@risingwave//:proto/backup_service.proto",
    "@risingwave//:proto/batch_plan.proto",
    "@risingwave//:proto/catalog.proto",
    "@risingwave//:proto/cloud_service.proto",
    "@risingwave//:proto/common.proto",
    "@risingwave//:proto/compactor.proto",
    "@risingwave//:proto/compute.proto",
    "@risingwave//:proto/connector_service.proto",
    "@risingwave//:proto/data.proto",
    "@risingwave//:proto/ddl_service.proto",
    "@risingwave//:proto/expr.proto",
    "@risingwave//:proto/health.proto",
    "@risingwave//:proto/hummock.proto",
    "@risingwave//:proto/iceberg_compaction.proto",
    "@risingwave//:proto/java_binding.proto",
    "@risingwave//:proto/meta.proto",
    "@risingwave//:proto/monitor_service.proto",
    "@risingwave//:proto/plan_common.proto",
    "@risingwave//:proto/source.proto",
    "@risingwave//:proto/stream_plan.proto",
    "@risingwave//:proto/stream_service.proto",
    "@risingwave//:proto/task_service.proto",
    "@risingwave//:proto/telemetry.proto",
    "@risingwave//:proto/user.proto",
    "@risingwave//:proto/serverless_backfill_controller.proto",
    "@risingwave//:proto/secret.proto",
    "@risingwave//:proto/frontend_service.proto",
  ],
  patches = ["//patches:risingwave_pb.patch"],
)
crate.annotation(crate = "sea-orm-migration", repositories = ["crates_risingwave"], crate_features = ["sqlx-sqlite"])
crate.spec(package = "rstest", version = "0.26.1", default_features = False, features = ["async-timeout"])
crate.spec(package = "similar-asserts", version = "1.7.0")
crate.spec(package = "tap", version = "1.0.1")
crate.from_specs()
use_repo(crate, "crates", "crates_risingwave")
tar = use_extension("@tar.bzl//tar:extensions.bzl", "toolchains")
use_repo(tar, "bsd_tar_toolchains")
register_toolchains("@bsd_tar_toolchains//:all")
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(name = "distroless_cc", tag = "latest", image = "gcr.io/distroless/cc", platforms = ["linux/amd64", "linux/arm64/v8"], reproducible = False)
use_repo(oci, "distroless_cc", "distroless_cc_linux_amd64", "distroless_cc_linux_arm64_v8")
apt = use_extension("@rules_distroless//apt:extensions.bzl", "apt")
apt.install(name = "bookworm", manifest = "//:bookworm.yaml", nolock = True)
use_repo(apt, "bookworm")
